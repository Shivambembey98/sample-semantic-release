import globals from "globals";
import pluginJs from "@eslint/js";

export default [
   { files: ["**/*.js"],
      languageOptions: { sourceType: "commonjs",
         globals: { ...globals.browser,...globals.node } } },
   { languageOptions: { globals: globals.browser } },
   {
      ignores: ["cdk.out/*", "eslint.config.mjs/*","test/*","lambda/user-service/unit-test/*",
         "lambda/product-service/unit-test/*","lambda/admin-service/unit-test/*",
         "lambda/admin-service/integration-test/*"
         ,"lambda/email-service/unit-test/*",
         "lambda/email-service/integration-test/*","lambda/blogs-service/unit-test/*", 
         "lambda/blogs-service/integration-test/*"
         ,"lambda/user-service/integration-test/*","lambda/product-service/integration-test/*"],
   },
   {
      rules: {
         "no-undef": "error",
         "semi-spacing": "error",
         "eqeqeq": "warn",
         "no-invalid-this": "error",
         "curly": ["error", "all"],
         "max-len": ["error", { "code": 500 }],
         "no-new-object": "error",
         "no-array-constructor": "error",
         "prefer-rest-params": "error",
         "prefer-spread": "error",
         "no-eval": "error",
         "no-implied-eval": "error",
         "no-shadow": ["warn"],
         "no-param-reassign": ["error", { "props": true }],
         "no-console": ["warn", { "allow": ["warn", "error"] }],
         "no-alert": "warn",
         "eol-last": ["error", "always"],
         "lines-between-class-members": ["error", "always"],
         "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 2 }],
         "no-return-assign": "error",
         "no-unused-expressions": ["error", { "allowTernary": true }],
         "no-useless-concat": "error",
         "no-useless-return": "error",
         "no-constant-condition": "warn",
         "no-unused-vars": ["warn", { "argsIgnorePattern": "req|res|next|__" }],
         "indent": ["error", 3, { "SwitchCase": 1 }],
         "no-mixed-spaces-and-tabs": "warn",
         "space-before-blocks": "error",
         "space-in-parens": "error",
         "space-infix-ops": "error",
         "space-unary-ops": "error",
         "keyword-spacing": "error",
         "multiline-ternary": ["error", "never"],
         "no-mixed-operators": "error",
         "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1 }],
         "no-whitespace-before-property": "error",
         "nonblock-statement-body-position": "error",
         "object-property-newline": [
            "error",
            { "allowAllPropertiesOnSameLine": true },
         ],
         "arrow-spacing": "error",
         "no-confusing-arrow": "error",
         "no-duplicate-imports": "error",
         "no-var": "error",
         "object-shorthand": ["error", "always"],
         "prefer-const": "error",
         "prefer-template": "warn",      
         "no-multi-assign": "error",
         "one-var": ["error", "never"],
         "no-redeclare": "error",
         "object-curly-spacing": ["error", "always"],
         "array-bracket-spacing": ["error", "never"],
         "comma-dangle": ["error", "always-multiline"],
         "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
         "prefer-destructuring": [
            "error",
            {
               "VariableDeclarator": {
                  "array": true,
                  "object": true,
               },
               "AssignmentExpression": {
                  "array": true,
                  "object": false,
               },
            },
            {
               "enforceForRenamedProperties": false,
            },
         ],
         "no-useless-rename": "error",    
         "func-call-spacing": ["error", "never"],
         "function-paren-newline": ["error", "consistent"],
         "arrow-parens": ["error", "always"],
         "space-before-function-paren": ["error", {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "always",
         }],
         "prefer-arrow-callback": "error",
         "no-useless-constructor": "error",
         "consistent-return": "warn",
      },
   },
   pluginJs.configs.recommended,
];
