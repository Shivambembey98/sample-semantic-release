name: AWS Dev Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Linting
        run: |
          npm install eslint --legacy-peer-deps
          npm run eslint
        working-directory: Rentte/Rentte-aws-lambda

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/build
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies for all services
        run: |
          cd Rentte/Rentte-aws-lambda
          for dir in lambda/*/; do
            if [ -f "$dir/package.json" ]; then
              echo "Installing dependencies for $dir"
              npm install --legacy-peer-deps --prefix "$dir"
            fi
          done

  integration:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Integration Tests for All Services
        run: |
          cd Rentte/Rentte-aws-lambda
          for dir in lambda/*/; do
            if [ -f "$dir/package.json" ]; then
              npm install --legacy-peer-deps --prefix "$dir"
              echo "Running integration tests for $dir"
              npm run test:integration --prefix "$dir"
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-south-1
      
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Install CDK
        run: |
          npm install
          npm install -g aws-cdk
        working-directory: Rentte/Rentte-aws-lambda
      
      - name: Install lambda service dependencies
        run: |
          cd Rentte/Rentte-aws-lambda
          for dir in lambda/*/; do
            if [ -f "$dir/package.json" ]; then
              echo "Installing dependencies for $dir"
              npm install --legacy-peer-deps --prefix "$dir"
            fi
          done

      - name: Deploy to Development Environment
        run: |
          cdk deploy AppStack --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_DEV_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ap-south-1
        working-directory: Rentte/Rentte-aws-lambda
